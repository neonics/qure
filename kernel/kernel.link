/* Script for ld -r: link without relocation */

/* http://sourceware.org/binutils/docs/ld/Builtin-Functions.html#Builtin-Functions */

/*OUTPUT_FORMAT(pei-i386)
-- can't use this:
Relocatable linking with relocations from format elf32-i386 (kernel.o) to format pei-i386 (kernel.obj.r.native) is not supported

*/
SEARCH_DIR("/usr/i686-cygwin/lib"); SEARCH_DIR("/usr/lib"); SEARCH_DIR("/usr/lib/w32api");
SECTIONS
{
/*  --image-base 0x...
	__ImageBase = 0;
	__image_base__ = 0;
*/

  .text : 
  {
		kernel_start = . ;
		KERNEL_START = . ;

		/* Realmode Kernel */

		KERNEL_CODE16_START = . ;
		*(.text16)
		KERNEL_CODE16_END = . ;
		KERNEL_CODE16_SIZE = ABSOLUTE( KERNEL_CODE16_END - KERNEL_CODE16_START );

		KERNEL_DATA16_START = . ;
		*(.data16)
		KERNEL_DATA16_END = .;

		REALMODE_KERNEL_END = .;

		/* 32 bit kernel */

		/* - code */

		KERNEL_CODE32_START = . ;
		*(.text)
		KERNEL_CODE32_END = . ;
		KERNEL_CODE32_SIZE = ABSOLUTE( KERNEL_CODE32_END - KERNEL_CODE32_START );

		KERNEL_CODE_SIZE = ABSOLUTE(KERNEL_CODE32_SIZE + KERNEL_CODE16_SIZE);


		/* - data */

		. = ALIGN(16);
		KERNEL_DATA_START = . ;
		*(.data)
		*(.strings)
		data_ring2_strings_end = .;

		/* -- classdef */

		data_classes_start = .;
		data_classdef_start = .;
		*(.classdef)
		data_classdef_end = .;
		/*	*(SORT(.classdef$*))*/
		*(.classdef$md)
		*(.classdef$mo)
		*(.classdef$ms)
		*(.classdef$*)
		data_classes_end = .;

		/* -- KAPI */

		_KAPI_COUNTER = 0;
		data_kapi_start = .;

		*(.kapi)	/* in case kernel.link-sections */
		*(.kapi$idx)
		_KAPI_IDX_SIZE = ABSOLUTE( . - data_kapi_start);
		KAPI_NUM_METHODS = ABSOLUTE(_KAPI_IDX_SIZE / 4);
		*(.kapi$ptr)
		*(.kapi$str)
		*(.kapi$arg)
		data_kapi_end = .;


		/* -- Kernel Callgate */
		data_kernel_callgate_start = .;
		*(.kernel_callgate)
		data_kernel_callgate_end   = .;
		KERNEL_CALLGATE_NUM_CALLS = ABSOLUTE( (data_kernel_callgate_end - data_kernel_callgate_start) / 4 );


		/* -- NET */
		data_nethandler_start = .;
		*(.nethandler)	/* in case kernel.link-sections */
		data_nethandler_ports = .;
		*(.nethandler$ports)
		data_nethandler_names = .;
		*(.nethandler$names)
		data_nethandler_end = .;
		NETHANDLER_COUNT = ABSOLUTE( (data_nethandler_end - data_nethandler_start) / (2+4+4) );

		/* -- SHELL */

		data_shell_cmds_start = .;
		*.o(.shellcmd)
		/*	kernel.o(.shellcmd)
		ring2.o(.shellcmd)*/
		SHELL_CMD_END = . ;
		LONG(0);	/* shell_command_code: end of list */
		data_shell_cmds_end = .;

		KERNEL_DATA_END = . ;
		KERNEL_DATA_SIZE = ABSOLUTE(KERNEL_DATA_END - KERNEL_DATA_START);


		/* Signature */

		kernel_signature = . ; LONG(0x1337c0de);
		kernel_end = .;
		KERNEL_SIZE = ABSOLUTE( kernel_end - kernel_start );

		KERNEL_END = .;
  }

  /DISCARD/	: { *(.sig) }

  /*
  .data  :
  {
    *(.data)
    *(.data2)
    *(.jcr)
  }
  */

  .rdata  :
  {
    *(.rdata)
    *(.rdata_runtime_pseudo_reloc)
  }
  .eh_frame	: { *(.eh_frame*) }
  .pdata		: { *(.pdata) }
  .edata		: { *(.edata) }
  .idata		: { }
  .tls			: { }
  .rsrc			: { *(.rsrc) }
  .reloc		: { *(.reloc) }
  .stab			: { *(.stab) }
  .stabstr	: { *(.stabstr) }
}
